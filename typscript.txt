Step 1: Install Node.js and TypeScript
Before you start using TypeScript, you need to have Node.js and npm (Node Package Manager) installed. TypeScript can be installed globally on your machine using npm.
1.1 Install Node.js
Go to the official Node.js website and download the LTS (Long Term Support) version for your operating system.
Once installed, you can check the versions of Node.js and npm by running:
node -v
npm -v

1.2 Install TypeScript
After Node.js is installed, you can install TypeScript globally by running the following command in your terminal:
npm install -g typescript

Once installed, you can verify that TypeScript is installed by running:
tsc -v

This will display the installed version of TypeScript.
Step 2: Create a TypeScript Project
2.1 Set up a New Project Directory
Create a new directory for your TypeScript project:
mkdir typescript-demo
cd typescript-demo

2.2 Initialize the Project with npm
Run the following command to initialize your project and create a package.json file:
npm init -y

2.3 Create a tsconfig.json File
Create a tsconfig.json file to configure TypeScript. This file tells TypeScript how to compile the code. You can create it manually or generate it by running:
tsc --init

A default tsconfig.json file will be created, but you can customize it later if needed.
Step 3: Write Your First TypeScript Program
3.1 Create a TypeScript File
Create a new file with the .ts extension (e.g., app.ts) in your project directory.
touch app.ts

3.2 Add Some TypeScript Code
Open app.ts and write a simple TypeScript program:
// app.ts
let message: string = "Hello, TypeScript!";
console.log(message);

In this program:
We declare a variable message of type string.
We then log the value of message to the console.
3.3 Compile TypeScript to JavaScript
To compile the TypeScript file (app.ts) into JavaScript, run the following command:
tsc app.ts

This will generate an app.js file. The tsc command compiles the TypeScript code into standard JavaScript that can run in any JavaScript environment (browser, Node.js, etc.).
3.4 Run the JavaScript Code
You can now run the compiled JavaScript code with Node.js:
node app.js

This will output:
Hello, TypeScript!

Step 4: Explore TypeScript Features
Let's explore some basic TypeScript features with hands-on examples.
4.1 Variables and Types
In TypeScript, you can define variables with explicit types:
let username: string = "John";
let age: number = 30;
let isActive: boolean = true;

console.log(username, age, isActive);

4.2 Arrays and Tuples
TypeScript allows you to define arrays and tuples with specific types.
Arrays:
let fruits: string[] = ["apple", "banana", "cherry"];
console.log(fruits);

Tuples (fixed-size arrays with elements of different types):
let person: [string, number] = ["Alice", 25];
console.log(person);

4.3 Functions with Type Annotations
In TypeScript, you can define the types of function parameters and the return type.
function add(a: number, b: number): number {
    return a + b;
}

console.log(add(5, 10));  // Output: 15

4.4 Interfaces
Interfaces in TypeScript allow you to define the structure of objects.
interface Person {
    name: string;
    age: number;
}

let employee: Person = {
    name: "Bob",
    age: 40
};

console.log(employee);

4.5 Classes
TypeScript supports object-oriented programming with classes.
class Car {
    make: string;
    model: string;

    constructor(make: string, model: string) {
        this.make = make;
        this.model = model;
    }

    drive() {
        console.log(`${this.make} ${this.model} is driving!`);
    }
}

let myCar = new Car("Tesla", "Model S");
myCar.drive();  // Output: Tesla Model S is driving!

4.6 Generics
Generics allow you to create reusable and flexible components.
function identity<T>(arg: T): T {
    return arg;
}

let output = identity("Hello, Generics!");
console.log(output);  // Output: Hello, Generics!

4.7 Type Inference
TypeScript has type inference, which means it can infer the type of a variable if it's not explicitly declared.
let num = 10;  // TypeScript infers that num is a number
console.log(num);

4.8 Union Types
Union types allow a variable to hold values of different types.
function printId(id: string | number): void {
    console.log(`ID: ${id}`);
}

printId("123");
printId(456);

4.9 Type Aliases
Type aliases allow you to define custom types.
type StringOrNumber = string | number;

let value: StringOrNumber = "Hello";
console.log(value);

value = 123;
console.log(value);

Step 5: Compile and Run TypeScript Code Automatically
Instead of manually compiling TypeScript each time, you can use the TypeScript Watch Mode.
Run the following command to start watching for changes:
tsc --watch

Now, any changes made to the .ts files will automatically trigger TypeScript to compile them to .js files.
Step 6: Explore TypeScript with a Real-World Framework (Optional)
Once you feel comfortable with the basics of TypeScript, you can explore integrating it with real-world frameworks like:
Angular: TypeScript is the primary language used in Angular applications.
React: You can use TypeScript in React to enhance type safety.
Node.js: TypeScript can be used for backend development with Node.js.
To get started with React + TypeScript, you can use create-react-app with the TypeScript template:
npx create-react-app my-app --template typescript
